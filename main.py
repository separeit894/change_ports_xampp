from cli import CLI
from gui import GUI

import os
import sys
import ctypes
import argparse



executable = "CPX.exe" if sys.argv[0].endswith(".exe") or sys.argv[0].lower().endswith("x")  else "python main.py"
epilog = (
    "Examples:\n"
    f"  {executable}\n"
    f"  {executable} --no_admin\n"
    f"  {executable} --console\n"
    f"  {executable} --console --no_admin\n"
    f"  {executable} --version"
)

def ensure_stdio():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç sys.stdout –∏ sys.stderr, –µ—Å–ª–∏ –æ–Ω–∏ None (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è pythonw)"""
    if sys.stdout is None or not hasattr(sys.stdout, "write"):
        try:
            sys.stdout = open("CONOUT$", "w", encoding="utf-8") if os.name == "nt" else open("/dev/tty", "w")
        except:
            sys.stdout = open(os.path.devnull, "w")
    if sys.stderr is None or not hasattr(sys.stderr, "write"):
        try:
            sys.stderr = open("CONOUT$", "w", encoding="utf-8") if os.name == "nt" else open("/dev/tty", "w")
        except:
            sys.stderr = sys.stdout or open(os.path.devnull, "w")

def create_console():
    ctypes.windll.kernel32.AllocConsole()
    sys.stdout = open("CONOUT$", "w")  
    sys.stderr = open("CONOUT$", "w")
    sys.stdin = open("CONIN$", "r")
        
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ CLI –∏–ª–∏ GUI
def main():
    try:
        
        ensure_stdio()
        #input("–ù–∞–∂–º–∏—Ç–µ Enter...")
        # print("="*50)
        # print("DEBUG: sys.argv =", sys.argv)
        # print("DEBUG: len(sys.argv) =", len(sys.argv))
        # print("="*50)
        # input("–ù–∞–∂–º–∏—Ç–µ Enter...")  # —á—Ç–æ–±—ã –æ–∫–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å
        parser = argparse.ArgumentParser(
            description="Change Ports XAMPP ‚Äî –º–µ–Ω—è–µ—Ç –ø–æ—Ä—Ç—ã Apache, MySQL –∏ –¥—Ä.",
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog=epilog
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é --console
        parser.add_argument(
            '--console',
            action='store_true',
            help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ (CLI)'
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é --version
        parser.add_argument(
            '-v',
            '--version',
            action='store_true',
            help='–£–∑–Ω–∞—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã'
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é --no-admin
        parser.add_argument(
            '--no_admin',
            action='store_true',
            help='–£–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
        )
        
        #print("sys.argv =", sys.argv)
        # filtered_args = [arg for arg in sys.argv[1:] if arg != sys.argv[0]]
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = parser.parse_args()
        if args.version:
            from config import version
            print(f"Change Ports Xampp {version}")
            sys.exit(0)
            
        if args.no_admin:
            import config
            config.rights_administrator = True

            
        #input("–ù–∞–∂–º–∏—Ç–µ Enter: ")

        # –†–µ—à–∞–µ–º, —á—Ç–æ –∑–∞–ø—É—Å–∫–∞—Ç—å
        if args.console:
            create_console()
            CLI().run_app()
            #input("–ù–∞–∂–º–∏—Ç–µ Enter: ")
            
        else:
            GUI().run_app()
            #input("–ù–∞–∂–º–∏—Ç–µ Enter: ")
            
    except Exception as ex:
        print(ex)
        # input("–ù–∞–∂–º–∏—Ç–µ Enter: ")


if __name__ == "__main__":
    try:
        main()
        # input("–ù–∞–∂–º–∏—Ç–µ Enter: ")
        
    except Exception as e:
        import traceback
        print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{traceback.format_exc()}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter: ")
        